server:
  port: 8080
---
server:
  port: 8092

spring:
  profiles: default
  application:
    name: store
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/1588-pizza?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=UTC
#    url: jdbc:mysql://10.0.2.15:3306/1588-pizza?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=UTC
    username: admin
    password: admin
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQL57Dialect
    hibernate:
# create, create-drop, update, validate, none
# create : SessionFactory 시작시 스키마를 삭제하고 다시 생성
# create-drop : SessionFactory 종료 시 스키마를 삭제
# update : 변경된 스키마 적용(운영DB에서는 사용하면 안됨), SessionFactory 연결된 DB와 비교하여 추가된 항목(컬럼)은 추가 만약 같은 변수명이면 오류발생
#          update 옵션에서 컬럼(변수) 삭제는 엄청난 문제를 발생시킬 수 있기 때문에 컬럼 추가만 반영된다.
# validate : 엔티티 변수들과 테이블 컬럼들이 정상 매핑되었는지만 확인, SessionFactory 시작시 객체구성과 스키마가 다르다면 예외 발생
# none: 아무것도 안함
# 운영환경에서는 절대 create, create-drop, update를 사용하면 안됨
#      ddl-auto: update
#      ddl-auto: validate     # 실제 운영에서 서비스 배포시는 none or validate만 사용, generate-ddl도 false로 운영
      ddl-auto: create        # 기존 테이블 DROP 후 재 생성, 반드시 로컬환경에서만 사용(운영X)
      generate-ddl: true      # generate-ddl 은 위의 ddl-auto 속성을 사용할지 말지를 결정하는 옵션이다.(기본값 false)
  cloud:
    stream:
      kafka:
        binder:
#          brokers: 10.0.2.15:9092
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: store
          destination: pizza
          contentType: application/json
        event-out:
          destination: pizza
          contentType: application/json

logging:
  level:
    root: info
    org.hibernate.type: trace
    org.hibernate.type.BasicTypeRegistry: WARN
    org.springframework.cloud: info
    org.apache.kafka.common.utils.AppInfoParser: WARN
    org.apache.kafka.clients.Metadata: WARN
    org.apache.kafka.clients.consumer.ConsumerConfig: WARN
    org.apache.kafka.clients.producer.ProducerConfig: WARN
    org.hibernate.hql.internal.QueryTranslatorFactoryInitiator: WARN

---

spring:
  profiles: docker
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://10.0.2.15:3306/1588-pizza?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=UTC
    username: admin
    password: admin
  jpa:
    properties:
      hibernate:
        show_sql: false
        format_sql: true
        dialect: org.hibernate.dialect.SQLServerDialect
    hibernate:
      ddl-auto: create
      generate-ddl: true
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka.kafka.svc.cluster.local:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: store
          destination: pizza
          contentType: application/json
        event-out:
          destination: pizza
          contentType: application/json
